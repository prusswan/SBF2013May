<script src="http://maps.googleapis.com/maps/api/js?v=3.exp&libraries=places&sensor=false"
type="text/javascript"></script>

<!-- script src="http://serverapi.arcgisonline.com/jsapi/arcgis/?v=2.8"></script -->
<script type='text/JavaScript' src="http://www.onemap.sg/API/JS?accessKEY=<%= Settings.onemap_api_key %>&v=2.8&type=full"></script>

<div><%= address %></div>
<div id="map_canvas" style="width: 100%; height: 1000px;"></div>
<div id="div_onemap" style="width: 100%; height: 1000px;"></div>

<script type="text/javascript">
  var infowindow = new google.maps.InfoWindow();
  var OneMap;
  var mashup;

  var themeGraphicsLayer;
  var gra;

  function initialize() {
    var yourAddress = "<%= address %>, Singapore";
    var geocoder = new google.maps.Geocoder();

    var mapOptions;

    geocoder.geocode({
      address: yourAddress
    }, function(locResult) {
      console.log(locResult);

      var center = locResult[0].geometry.location;

      mapOptions = {
        zoom: 18,
        center: center,
        mapTypeId: google.maps.MapTypeId.ROADMAP
      }

      map = new google.maps.Map(document.getElementById("map_canvas"),mapOptions);

      var marker = new google.maps.Marker({
        position: center,
        title: "<%= address %>",
        map: map,
      });

      var transitLayer = new google.maps.TransitLayer();
      transitLayer.setMap(map);

      var request = {
        location: center,
        radius: '1000',
        types: ['bus_station']
      };

      service = new google.maps.places.PlacesService(map);
      service.nearbySearch(request, callback);
    });
  }

  function callback(results, status) {
    if (status == google.maps.places.PlacesServiceStatus.OK) {
      console.log(results, 'places');
      for (var i = 0; i < results.length; i++) {
        var place = results[i];
        createMarker(results[i]);
      }
    }
  }

  function createMarker(place) {
    var placeLoc = place.geometry.location;
    var marker = new google.maps.Marker({
      map: map,
      position: place.geometry.location
    });

    google.maps.event.addListener(marker, 'click', function() {
      infowindow.setContent(place.name);
      infowindow.open(map, this);
    });
  }

  function overlayData(mashupResults)
  {
    function hexToRgb(hex) {
      var result = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(hex);
      return result ? {
        r: parseInt(result[1], 16),
        g: parseInt(result[2], 16),
        b: parseInt(result[3], 16)
      } : null;
    }
    var results = mashupResults.results;
    console.log(mashupResults, 'bus_stops')

    if (results == "No results") {
      // alert("Theme not found. Please check theme name.");
      return
    }

    var featcount = mashupResults.count;
    var iconPath = mashupResults.iconPath;

    iconPath = 'http://www.publictransport.sg/img/bus.gif';
    var featType = mashupResults.featType;
    var theme = mashupResults.theme;

    themeGraphicsLayer.clear();
    var i;
    var xPnt;
    var yPnt;
    var xCord;
    var yCord;

    var pntArr = new Array();


    if (results.length==0){
      return
    }

    if (featType == "Point" || theme == 'Bus_Stop')
    {
      //process all the results
      for (i = 0; i < results.length; i++)
      {

        //create point graphic on map using generatePointGraphic function
        var PointGraphic=generatePointGraphic(results[i].XY,results[i].ICON_NAME,iconPath)
        //set graphic attributes
        PointGraphic.attributes=results[i]
        //add newly created graphic in graphiclayer
        themeGraphicsLayer.add(PointGraphic);
      }
    }
    else if (featType == "Polygon")
    {
      var polygon;
      for (i = 0;i < results.length; i++)
      {
        if(mashupResults.results[i].SYMBOLCOLOR !=undefined && mashupResults.results[i].SYMBOLCOLOR !="")
        {
          var polyColor = mashupResults.results[i].SYMBOLCOLOR;
          var r= hexToRgb(polyColor).r;
          var g= hexToRgb(polyColor).g;
          var b= hexToRgb(polyColor).b;
        }
        else if(mashupResults.results[i].SYMBOLCOLOR =="")
        {
          var r= 0;
          var g= 0;
          var b= 0;
        }
        pntArr = [];
        polygon = new esri.geometry.Polygon(new esri.SpatialReference({wkid:3414}));

        for (var x=0; x < results[i].XY.split("|").length; x++)
        {
          xCord = results[i].XY.split("|")[x].split(",")[0];
          yCord = results[i].XY.split("|")[x].split(",")[1];

          var PointLocation = new esri.geometry.Point(xCord, yCord, new esri.SpatialReference({ wkid: 3414 }))
          pntArr.push(PointLocation);
        }
        polygon.addRing(pntArr);

        gra = new esri.Graphic;
        gra.geometry = polygon;
        gra.attributes=results[i];

        var sfs = new esri.symbol.SimpleFillSymbol(esri.symbol.SimpleFillSymbol.STYLE_SOLID,
          new esri.symbol.SimpleLineSymbol(esri.symbol.SimpleLineSymbol.STYLE_SOLID,
            new dojo.Color([0,0,0]), 2),new dojo.Color([r,g,b,0.8]));

        gra.symbol = sfs;
        themeGraphicsLayer.add(gra);
      }
    }
    else if (featType == "Line")
    {
      var pLine;
      for (i = 0;i < results.length; i++)
      {
        if(mashupResults.results[i].SYMBOLCOLOR !=undefined && mashupResults.results[i].SYMBOLCOLOR !="")
        {
          var polyColor = mashupResults.results[i].SYMBOLCOLOR;
          var r= hexToRgb(polyColor).r;
          var g= hexToRgb(polyColor).g;
          var b= hexToRgb(polyColor).b;
        }
        else if(mashupResults.results[i].SYMBOLCOLOR =="")
        {
          var r= 0;
          var g= 0;
          var b= 0;
        }
        pntArr = [];
        pLine = new esri.geometry.Polyline(new esri.SpatialReference({wkid:3414}));

        for (var x=0; x < results[i].XY.split("|").length; x++)
        {
          xCord = results[i].XY.split("|")[x].split(",")[0];
          yCord = results[i].XY.split("|")[x].split(",")[1];

          var PointLocation = new esri.geometry.Point(xCord, yCord, new esri.SpatialReference({ wkid: 3414 }))
          pntArr.push(PointLocation);
        }
        pLine.addPath(pntArr);

        gra = new esri.Graphic;
        gra.geometry = pLine;
        gra.attributes = results[i];

        var sfs = new esri.symbol.SimpleLineSymbol(esri.symbol.SimpleLineSymbol.STYLE_SOLID,
          new dojo.Color([r,g,b]), 2);
        gra.symbol = sfs;
        themeGraphicsLayer.add(gra);
      }
    }
  }

  google.maps.event.addDomListener(window, 'load', initialize);

  function OverlayTheme(){
    // debugger;

     //var themeName = document.getElementById('txtTheme').value;
     var themeName = 'Bus_Stop';
     //themeName = 'Hotels';

      // if (themeName == "") {
      // alert('Please provide theme name')
      // return
      // }

      mashup = new MashupData();
      mashup.themeName = themeName;
      mashup.extent = OneMap.map.extent.xmin + "," + OneMap.map.extent.ymin + "," + OneMap.map.extent.xmax + "," + OneMap.map.extent.ymax;
      // mashup.extent = OneMap.map.extent;

      // hack to prevent GetDataForCallout from breaking due to missing layerdata for Bus_Stop!
      //if ((obj.layerData == undefined) || (obj.layerData == "")) {
          var extractData = new GetLayerInfoClass()
          extractData.themeName = 'Hotels';
          var extractedLayerData = extractData.ExtracLayerInfo(function(results) {
              mashup.layerData = results
          })
      //}
      console.log(mashup, 'mashup_layerdata');

      //add graphic layer
      themeGraphicsLayer = new esri.layers.GraphicsLayer();
      themeGraphicsLayer.id=themeName;
      OneMap.map.addLayer(themeGraphicsLayer);

      mashup.GetMashupData(overlayData);


      //resize info widnow
      OneMap.map.infoWindow.resize(300, 200);
      OneMap.map.infoWindow.hide();
      OneMap.onOneMapExtentChange(OverlayThemeOnExtentChnage)
      try{

        //set graphic onclick event
        dojo.connect(themeGraphicsLayer, "onClick", function(evt)
        {//debugger
            console.log(mashup, 'mashup');
            mashup.GetDataForCallout(evt.graphic,"",function(results)
            {//debugger
                var formattedResults=mashup.formatResultsEnhanced(results);//mashup.formatResults(results);
                OneMap.map.infoWindow.setContent(formattedResults);
                OneMap.map.infoWindow.show(evt.screenPoint,OneMap.map.getInfoWindowAnchor(evt.screenPoint));
            });
        })
      }
      catch (err)
      {}
   }

  function OverlayThemeOnExtentChnage(extent)
   {//debugger

      mashup.extent = extent.xmin + "," + extent.ymin + "," + extent.xmax + "," + extent.ymax;

      mashup.GetMashupData(overlayData)
  }

  function createMap() {
    var centerPoint="28968.103,33560.969"
    var levelNumber=8;

    OneMap = new GetOneMap('div_onemap','SM',{level:levelNumber,center:centerPoint});
    dojo.addOnLoad(OverlayTheme);
  }

  dojo.addOnLoad(createMap);

</script>


